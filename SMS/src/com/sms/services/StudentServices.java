package com.sms.services;

import javax.persistence.*;

import com.sms.DAOI.StudentServiceDAOI;
import com.sms.entities.Course;
import com.sms.entities.Student;


import java.util.*;

public class StudentServices implements StudentServiceDAOI{

	
	@Override
	public List<Student> getAllStudents()
	{
		List<Student> studentList = new ArrayList<>();		
		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();

		//		Query query = entitymanager.createQuery("SELECT e FROM Items e");
		Query query = entitymanager.createNamedQuery("queryAllStudents");
		studentList = query.getResultList();

		entitymanager.close();
		entitymanagerfactory.close();

		return studentList;
	}


	// –This method takes a Student’s email as a String and 
	// parses the student list for a Student with that email 
	// and returns a Student Object.
	@Override
	public Student getStudentByEmail(String sEmail) 
	{
		Student foundStudentEmail = null;

		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
		try {		
			foundStudentEmail = entitymanager.find(Student.class, sEmail);
		} catch(PersistenceException e) {
			e.getMessage();
		}
		finally {
			entitymanager.close();
			entitymanagerfactory.close();
		}		
		return foundStudentEmail;
	}

	@Override
	public boolean validateStudent(String sEmail, String sPassword) {
		Student foundStudent = null;
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entityManager = entityManagerFactory.createEntityManager();

		try {
			foundStudent = entityManager.find(Student.class, sEmail);
		}catch(PersistenceException e) {
			e.getMessage();
		} finally {
			entityManager.close();
			entityManagerFactory.close();
		}

		return foundStudent.getEmail().equals(sEmail) && foundStudent.getPassword().equals(sPassword);
	}


	// –After a successful student validation, this method takes a 
	// Student’s email and a Course ID. It checks in the join table 
	// (i.e. Student_Course) generated by JPA to find if a Student 
	// with that Email is currently attending a Course with that ID.
	// If the Student is not attending that Course, register the student 
	// to that course; otherwise not.

	@Override
	public void registerStudentToCourse(String sEmail, int cid) 
	{
		boolean result = true;
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		Student studentFound = entityManager.find(Student.class, sEmail);
		Course courseFound = entityManager.find(Course.class, cid);
		List<Course> listCourse = studentFound.getCourses();
		listCourse.add(courseFound);
		try 
		{
			entityManager.getTransaction().begin();
			entityManager.persist(courseFound);
			entityManager.getTransaction().commit();
		} catch (PersistenceException e) {
			e.getMessage();
			result = false;
		} finally {
			System.out.println(result ? "Student saved" : "Student is not saved");
			entityManager.close();
			entityManagerFactory.close();
		}
		return;
	}
	
	@Override
	public List<Course> getStudentCourses(String sEmail) {
		Student foundStudent = null;
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		try {
			foundStudent = entityManager.find(Student.class, sEmail);
		} catch (PersistenceException e) {
			e.getMessage();
		} finally {
			entityManager.close();
			entityManagerFactory.close();
		}

		return foundStudent != null ? foundStudent.getCourses() : new ArrayList<Course>();
	}
}

	// –This method takes a Student’s Email as a parameter and would 
	// find all the courses a student is registered.
	//	List<Course> getStudentCourses(String sEmail){
	//
	//	}

//	@Override
//	public boolean addStudent(Student student) {
//		boolean result = true;
//
//		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
//		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
//		try {		
//			entitymanager.getTransaction().begin();		
//			entitymanager.persist(student);		
//			entitymanager.getTransaction().commit();
//
//		} catch(PersistenceException e) {
//			e.getMessage();-/*//--
//				System.out.println(e.toString());
//				result = false;
//		}
//		finally {
//			entitymanager.close();
//			entitymanagerfactory.close();
//		}		
//		return result;
//	}
//
//
//	
//
//	//@Override
//		public Student verifyPassword(String email) {
//			Student foundStudentPassword = null;
//
//			EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
//			EntityManager entitymanager = entitymanagerfactory.createEntityManager();
//			try {		
//				foundStudentPassword = entitymanager.getReference(Student.class, email);
//			} catch(PersistenceException e) {
//					e.getMessage();
//			}
//			finally {
//				entitymanager.close();
//				entitymanagerfactory.close();
//			}		
//			return foundStudentPassword;
//		}
//
//
//		
//
//
//	
//
//
